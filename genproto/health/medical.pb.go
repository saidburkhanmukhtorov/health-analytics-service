// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: protos/medical.proto

package health

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ByIdRequest message for Get and Delete methods
type ByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ByIdRequest) Reset() {
	*x = ByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByIdRequest) ProtoMessage() {}

func (x *ByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByIdRequest.ProtoReflect.Descriptor instead.
func (*ByIdRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{0}
}

func (x *ByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Medical Records
type MedicalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordType  string   `protobuf:"bytes,3,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
	RecordDate  string   `protobuf:"bytes,4,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`
	Description string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DoctorId    string   `protobuf:"bytes,6,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
	Attachments []string `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CreatedAt   string   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MedicalRecord) Reset() {
	*x = MedicalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecord) ProtoMessage() {}

func (x *MedicalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecord.ProtoReflect.Descriptor instead.
func (*MedicalRecord) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{1}
}

func (x *MedicalRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MedicalRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MedicalRecord) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *MedicalRecord) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *MedicalRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MedicalRecord) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *MedicalRecord) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *MedicalRecord) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MedicalRecord) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Genetic Data
type GeneticData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DataType     string     `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue    *anypb.Any `protobuf:"bytes,4,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	AnalysisDate string     `protobuf:"bytes,5,opt,name=analysis_date,json=analysisDate,proto3" json:"analysis_date,omitempty"`
	CreatedAt    string     `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string     `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GeneticData) Reset() {
	*x = GeneticData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneticData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneticData) ProtoMessage() {}

func (x *GeneticData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneticData.ProtoReflect.Descriptor instead.
func (*GeneticData) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{2}
}

func (x *GeneticData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GeneticData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GeneticData) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *GeneticData) GetDataValue() *anypb.Any {
	if x != nil {
		return x.DataValue
	}
	return nil
}

func (x *GeneticData) GetAnalysisDate() string {
	if x != nil {
		return x.AnalysisDate
	}
	return ""
}

func (x *GeneticData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GeneticData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Lifestyle Data
type LifestyleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DataType     string     `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue    *anypb.Any `protobuf:"bytes,4,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	RecordedDate string     `protobuf:"bytes,5,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	CreatedAt    string     `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string     `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *LifestyleData) Reset() {
	*x = LifestyleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifestyleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifestyleData) ProtoMessage() {}

func (x *LifestyleData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifestyleData.ProtoReflect.Descriptor instead.
func (*LifestyleData) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{3}
}

func (x *LifestyleData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LifestyleData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LifestyleData) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *LifestyleData) GetDataValue() *anypb.Any {
	if x != nil {
		return x.DataValue
	}
	return nil
}

func (x *LifestyleData) GetRecordedDate() string {
	if x != nil {
		return x.RecordedDate
	}
	return ""
}

func (x *LifestyleData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *LifestyleData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Wearable Data
type WearableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType        string     `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DataType          string     `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataValue         *anypb.Any `protobuf:"bytes,5,opt,name=data_value,json=dataValue,proto3" json:"data_value,omitempty"`
	RecordedTimestamp string     `protobuf:"bytes,6,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
	CreatedAt         string     `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string     `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *WearableData) Reset() {
	*x = WearableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableData) ProtoMessage() {}

func (x *WearableData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableData.ProtoReflect.Descriptor instead.
func (*WearableData) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{4}
}

func (x *WearableData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WearableData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableData) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableData) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *WearableData) GetDataValue() *anypb.Any {
	if x != nil {
		return x.DataValue
	}
	return nil
}

func (x *WearableData) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

func (x *WearableData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WearableData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Health Recommendations
type HealthRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId             string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecommendationType string `protobuf:"bytes,3,opt,name=recommendation_type,json=recommendationType,proto3" json:"recommendation_type,omitempty"`
	Description        string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Priority           int32  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	CreatedAt          string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *HealthRecommendation) Reset() {
	*x = HealthRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRecommendation) ProtoMessage() {}

func (x *HealthRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRecommendation.ProtoReflect.Descriptor instead.
func (*HealthRecommendation) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{5}
}

func (x *HealthRecommendation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HealthRecommendation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HealthRecommendation) GetRecommendationType() string {
	if x != nil {
		return x.RecommendationType
	}
	return ""
}

func (x *HealthRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthRecommendation) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *HealthRecommendation) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HealthRecommendation) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Sleep Data
type SleepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SleepDuration int64  `protobuf:"varint,2,opt,name=sleep_duration,json=sleepDuration,proto3" json:"sleep_duration,omitempty"` // Sleep duration in milliseconds
	SleepQuality  string `protobuf:"bytes,3,opt,name=sleep_quality,json=sleepQuality,proto3" json:"sleep_quality,omitempty"`     // Subjective sleep quality (e.g., "Good", "Average", "Poor")
	RecordedDate  string `protobuf:"bytes,4,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`     // Date when the sleep data was recorded (YYYY-MM-DD)
}

func (x *SleepData) Reset() {
	*x = SleepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepData) ProtoMessage() {}

func (x *SleepData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepData.ProtoReflect.Descriptor instead.
func (*SleepData) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{6}
}

func (x *SleepData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SleepData) GetSleepDuration() int64 {
	if x != nil {
		return x.SleepDuration
	}
	return 0
}

func (x *SleepData) GetSleepQuality() string {
	if x != nil {
		return x.SleepQuality
	}
	return ""
}

func (x *SleepData) GetRecordedDate() string {
	if x != nil {
		return x.RecordedDate
	}
	return ""
}

// Heart Rate Data
type HeartRateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	HeartRate         int32  `protobuf:"varint,2,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`                        // Heart rate in beats per minute (BPM)
	RecordedTimestamp string `protobuf:"bytes,3,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"` // Timestamp when the heart rate was recorded (RFC3339 format)
}

func (x *HeartRateData) Reset() {
	*x = HeartRateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartRateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartRateData) ProtoMessage() {}

func (x *HeartRateData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartRateData.ProtoReflect.Descriptor instead.
func (*HeartRateData) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{7}
}

func (x *HeartRateData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HeartRateData) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *HeartRateData) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

// Empty Message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{8}
}

// Request messages for List methods with filters
type ListMedicalRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordType  string `protobuf:"bytes,2,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
	RecordDate  string `protobuf:"bytes,3,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DoctorId    string `protobuf:"bytes,5,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
}

func (x *ListMedicalRecordsRequest) Reset() {
	*x = ListMedicalRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicalRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicalRecordsRequest) ProtoMessage() {}

func (x *ListMedicalRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicalRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListMedicalRecordsRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{9}
}

func (x *ListMedicalRecordsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListMedicalRecordsRequest) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *ListMedicalRecordsRequest) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *ListMedicalRecordsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListMedicalRecordsRequest) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

type ListGeneticDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DataType     string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	AnalysisDate string `protobuf:"bytes,3,opt,name=analysis_date,json=analysisDate,proto3" json:"analysis_date,omitempty"`
}

func (x *ListGeneticDataRequest) Reset() {
	*x = ListGeneticDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGeneticDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGeneticDataRequest) ProtoMessage() {}

func (x *ListGeneticDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGeneticDataRequest.ProtoReflect.Descriptor instead.
func (*ListGeneticDataRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{10}
}

func (x *ListGeneticDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListGeneticDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ListGeneticDataRequest) GetAnalysisDate() string {
	if x != nil {
		return x.AnalysisDate
	}
	return ""
}

type ListLifestyleDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DataType     string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RecordedDate string `protobuf:"bytes,3,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
}

func (x *ListLifestyleDataRequest) Reset() {
	*x = ListLifestyleDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLifestyleDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLifestyleDataRequest) ProtoMessage() {}

func (x *ListLifestyleDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLifestyleDataRequest.ProtoReflect.Descriptor instead.
func (*ListLifestyleDataRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{11}
}

func (x *ListLifestyleDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListLifestyleDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ListLifestyleDataRequest) GetRecordedDate() string {
	if x != nil {
		return x.RecordedDate
	}
	return ""
}

type ListWearableDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType        string `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DataType          string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RecordedTimestamp string `protobuf:"bytes,4,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
}

func (x *ListWearableDataRequest) Reset() {
	*x = ListWearableDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWearableDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWearableDataRequest) ProtoMessage() {}

func (x *ListWearableDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWearableDataRequest.ProtoReflect.Descriptor instead.
func (*ListWearableDataRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{12}
}

func (x *ListWearableDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListWearableDataRequest) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *ListWearableDataRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ListWearableDataRequest) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

type ListHealthRecommendationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecommendationType string `protobuf:"bytes,2,opt,name=recommendation_type,json=recommendationType,proto3" json:"recommendation_type,omitempty"`
	Priority           int32  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ListHealthRecommendationsRequest) Reset() {
	*x = ListHealthRecommendationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHealthRecommendationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHealthRecommendationsRequest) ProtoMessage() {}

func (x *ListHealthRecommendationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHealthRecommendationsRequest.ProtoReflect.Descriptor instead.
func (*ListHealthRecommendationsRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{13}
}

func (x *ListHealthRecommendationsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListHealthRecommendationsRequest) GetRecommendationType() string {
	if x != nil {
		return x.RecommendationType
	}
	return ""
}

func (x *ListHealthRecommendationsRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Response messages for List methods
type ListMedicalRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicalRecords []*MedicalRecord `protobuf:"bytes,1,rep,name=medical_records,json=medicalRecords,proto3" json:"medical_records,omitempty"`
}

func (x *ListMedicalRecordsResponse) Reset() {
	*x = ListMedicalRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicalRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicalRecordsResponse) ProtoMessage() {}

func (x *ListMedicalRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicalRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListMedicalRecordsResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{14}
}

func (x *ListMedicalRecordsResponse) GetMedicalRecords() []*MedicalRecord {
	if x != nil {
		return x.MedicalRecords
	}
	return nil
}

type ListGeneticDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneticData []*GeneticData `protobuf:"bytes,1,rep,name=genetic_data,json=geneticData,proto3" json:"genetic_data,omitempty"`
}

func (x *ListGeneticDataResponse) Reset() {
	*x = ListGeneticDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGeneticDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGeneticDataResponse) ProtoMessage() {}

func (x *ListGeneticDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGeneticDataResponse.ProtoReflect.Descriptor instead.
func (*ListGeneticDataResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{15}
}

func (x *ListGeneticDataResponse) GetGeneticData() []*GeneticData {
	if x != nil {
		return x.GeneticData
	}
	return nil
}

type ListLifestyleDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifestyleData []*LifestyleData `protobuf:"bytes,1,rep,name=lifestyle_data,json=lifestyleData,proto3" json:"lifestyle_data,omitempty"`
}

func (x *ListLifestyleDataResponse) Reset() {
	*x = ListLifestyleDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLifestyleDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLifestyleDataResponse) ProtoMessage() {}

func (x *ListLifestyleDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLifestyleDataResponse.ProtoReflect.Descriptor instead.
func (*ListLifestyleDataResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{16}
}

func (x *ListLifestyleDataResponse) GetLifestyleData() []*LifestyleData {
	if x != nil {
		return x.LifestyleData
	}
	return nil
}

type ListWearableDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableData []*WearableData `protobuf:"bytes,1,rep,name=wearable_data,json=wearableData,proto3" json:"wearable_data,omitempty"`
}

func (x *ListWearableDataResponse) Reset() {
	*x = ListWearableDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWearableDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWearableDataResponse) ProtoMessage() {}

func (x *ListWearableDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWearableDataResponse.ProtoReflect.Descriptor instead.
func (*ListWearableDataResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{17}
}

func (x *ListWearableDataResponse) GetWearableData() []*WearableData {
	if x != nil {
		return x.WearableData
	}
	return nil
}

type ListHealthRecommendationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthRecommendations []*HealthRecommendation `protobuf:"bytes,1,rep,name=health_recommendations,json=healthRecommendations,proto3" json:"health_recommendations,omitempty"`
}

func (x *ListHealthRecommendationsResponse) Reset() {
	*x = ListHealthRecommendationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHealthRecommendationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHealthRecommendationsResponse) ProtoMessage() {}

func (x *ListHealthRecommendationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHealthRecommendationsResponse.ProtoReflect.Descriptor instead.
func (*ListHealthRecommendationsResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{18}
}

func (x *ListHealthRecommendationsResponse) GetHealthRecommendations() []*HealthRecommendation {
	if x != nil {
		return x.HealthRecommendations
	}
	return nil
}

// DailySummaryRequest message
type DailySummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Date   string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"` // Date in YYYY-MM-DD format
}

func (x *DailySummaryRequest) Reset() {
	*x = DailySummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailySummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailySummaryRequest) ProtoMessage() {}

func (x *DailySummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailySummaryRequest.ProtoReflect.Descriptor instead.
func (*DailySummaryRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{19}
}

func (x *DailySummaryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DailySummaryRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// WeeklySummaryRequest message
type WeeklySummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartDate string `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // Start date in YYYY-MM-DD format
	EndDate   string `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // End date in YYYY-MM-DD format
}

func (x *WeeklySummaryRequest) Reset() {
	*x = WeeklySummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklySummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklySummaryRequest) ProtoMessage() {}

func (x *WeeklySummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklySummaryRequest.ProtoReflect.Descriptor instead.
func (*WeeklySummaryRequest) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{20}
}

func (x *WeeklySummaryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WeeklySummaryRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *WeeklySummaryRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// SummaryResponse message
type SummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicalRecords        []*MedicalRecord        `protobuf:"bytes,1,rep,name=medical_records,json=medicalRecords,proto3" json:"medical_records,omitempty"`
	GeneticData           []*GeneticData          `protobuf:"bytes,2,rep,name=genetic_data,json=geneticData,proto3" json:"genetic_data,omitempty"`
	LifestyleData         []*LifestyleData        `protobuf:"bytes,3,rep,name=lifestyle_data,json=lifestyleData,proto3" json:"lifestyle_data,omitempty"`
	WearableData          []*WearableData         `protobuf:"bytes,4,rep,name=wearable_data,json=wearableData,proto3" json:"wearable_data,omitempty"`
	HealthRecommendations []*HealthRecommendation `protobuf:"bytes,5,rep,name=health_recommendations,json=healthRecommendations,proto3" json:"health_recommendations,omitempty"`
}

func (x *SummaryResponse) Reset() {
	*x = SummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_medical_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryResponse) ProtoMessage() {}

func (x *SummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_medical_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryResponse.ProtoReflect.Descriptor instead.
func (*SummaryResponse) Descriptor() ([]byte, []int) {
	return file_protos_medical_proto_rawDescGZIP(), []int{21}
}

func (x *SummaryResponse) GetMedicalRecords() []*MedicalRecord {
	if x != nil {
		return x.MedicalRecords
	}
	return nil
}

func (x *SummaryResponse) GetGeneticData() []*GeneticData {
	if x != nil {
		return x.GeneticData
	}
	return nil
}

func (x *SummaryResponse) GetLifestyleData() []*LifestyleData {
	if x != nil {
		return x.LifestyleData
	}
	return nil
}

func (x *SummaryResponse) GetWearableData() []*WearableData {
	if x != nil {
		return x.WearableData
	}
	return nil
}

func (x *SummaryResponse) GetHealthRecommendations() []*HealthRecommendation {
	if x != nil {
		return x.HealthRecommendations
	}
	return nil
}

var File_protos_medical_proto protoreflect.FileDescriptor

var file_protos_medical_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x0b, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xec, 0x01, 0x0a,
	0x14, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x09,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x07, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x75, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x55, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0d, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x16, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x14, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a,
	0x0e, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0d, 0x77,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xad, 0x01, 0x0a, 0x17,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe8, 0x02, 0x0a, 0x14,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x3b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x21, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcf, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe5, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xda, 0x02, 0x0a, 0x13, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x39, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb5, 0x03,
	0x0a, 0x1b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_medical_proto_rawDescOnce sync.Once
	file_protos_medical_proto_rawDescData = file_protos_medical_proto_rawDesc
)

func file_protos_medical_proto_rawDescGZIP() []byte {
	file_protos_medical_proto_rawDescOnce.Do(func() {
		file_protos_medical_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_medical_proto_rawDescData)
	})
	return file_protos_medical_proto_rawDescData
}

var file_protos_medical_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_protos_medical_proto_goTypes = []any{
	(*ByIdRequest)(nil),                       // 0: health.ByIdRequest
	(*MedicalRecord)(nil),                     // 1: health.MedicalRecord
	(*GeneticData)(nil),                       // 2: health.GeneticData
	(*LifestyleData)(nil),                     // 3: health.LifestyleData
	(*WearableData)(nil),                      // 4: health.WearableData
	(*HealthRecommendation)(nil),              // 5: health.HealthRecommendation
	(*SleepData)(nil),                         // 6: health.SleepData
	(*HeartRateData)(nil),                     // 7: health.HeartRateData
	(*Empty)(nil),                             // 8: health.Empty
	(*ListMedicalRecordsRequest)(nil),         // 9: health.ListMedicalRecordsRequest
	(*ListGeneticDataRequest)(nil),            // 10: health.ListGeneticDataRequest
	(*ListLifestyleDataRequest)(nil),          // 11: health.ListLifestyleDataRequest
	(*ListWearableDataRequest)(nil),           // 12: health.ListWearableDataRequest
	(*ListHealthRecommendationsRequest)(nil),  // 13: health.ListHealthRecommendationsRequest
	(*ListMedicalRecordsResponse)(nil),        // 14: health.ListMedicalRecordsResponse
	(*ListGeneticDataResponse)(nil),           // 15: health.ListGeneticDataResponse
	(*ListLifestyleDataResponse)(nil),         // 16: health.ListLifestyleDataResponse
	(*ListWearableDataResponse)(nil),          // 17: health.ListWearableDataResponse
	(*ListHealthRecommendationsResponse)(nil), // 18: health.ListHealthRecommendationsResponse
	(*DailySummaryRequest)(nil),               // 19: health.DailySummaryRequest
	(*WeeklySummaryRequest)(nil),              // 20: health.WeeklySummaryRequest
	(*SummaryResponse)(nil),                   // 21: health.SummaryResponse
	(*anypb.Any)(nil),                         // 22: google.protobuf.Any
}
var file_protos_medical_proto_depIdxs = []int32{
	22, // 0: health.GeneticData.data_value:type_name -> google.protobuf.Any
	22, // 1: health.LifestyleData.data_value:type_name -> google.protobuf.Any
	22, // 2: health.WearableData.data_value:type_name -> google.protobuf.Any
	1,  // 3: health.ListMedicalRecordsResponse.medical_records:type_name -> health.MedicalRecord
	2,  // 4: health.ListGeneticDataResponse.genetic_data:type_name -> health.GeneticData
	3,  // 5: health.ListLifestyleDataResponse.lifestyle_data:type_name -> health.LifestyleData
	4,  // 6: health.ListWearableDataResponse.wearable_data:type_name -> health.WearableData
	5,  // 7: health.ListHealthRecommendationsResponse.health_recommendations:type_name -> health.HealthRecommendation
	1,  // 8: health.SummaryResponse.medical_records:type_name -> health.MedicalRecord
	2,  // 9: health.SummaryResponse.genetic_data:type_name -> health.GeneticData
	3,  // 10: health.SummaryResponse.lifestyle_data:type_name -> health.LifestyleData
	4,  // 11: health.SummaryResponse.wearable_data:type_name -> health.WearableData
	5,  // 12: health.SummaryResponse.health_recommendations:type_name -> health.HealthRecommendation
	19, // 13: health.HealthMonitoringService.GetDailySummary:input_type -> health.DailySummaryRequest
	20, // 14: health.HealthMonitoringService.GetWeeklySummary:input_type -> health.WeeklySummaryRequest
	1,  // 15: health.MedicalRecordService.CreateMedicalRecord:input_type -> health.MedicalRecord
	0,  // 16: health.MedicalRecordService.GetMedicalRecord:input_type -> health.ByIdRequest
	1,  // 17: health.MedicalRecordService.UpdateMedicalRecord:input_type -> health.MedicalRecord
	0,  // 18: health.MedicalRecordService.DeleteMedicalRecord:input_type -> health.ByIdRequest
	9,  // 19: health.MedicalRecordService.ListMedicalRecords:input_type -> health.ListMedicalRecordsRequest
	2,  // 20: health.GeneticDataService.CreateGeneticData:input_type -> health.GeneticData
	0,  // 21: health.GeneticDataService.GetGeneticData:input_type -> health.ByIdRequest
	2,  // 22: health.GeneticDataService.UpdateGeneticData:input_type -> health.GeneticData
	0,  // 23: health.GeneticDataService.DeleteGeneticData:input_type -> health.ByIdRequest
	10, // 24: health.GeneticDataService.ListGeneticData:input_type -> health.ListGeneticDataRequest
	3,  // 25: health.LifestyleDataService.CreateLifestyleData:input_type -> health.LifestyleData
	0,  // 26: health.LifestyleDataService.GetLifestyleData:input_type -> health.ByIdRequest
	3,  // 27: health.LifestyleDataService.UpdateLifestyleData:input_type -> health.LifestyleData
	0,  // 28: health.LifestyleDataService.DeleteLifestyleData:input_type -> health.ByIdRequest
	11, // 29: health.LifestyleDataService.ListLifestyleData:input_type -> health.ListLifestyleDataRequest
	4,  // 30: health.WearableDataService.CreateWearableData:input_type -> health.WearableData
	0,  // 31: health.WearableDataService.GetWearableData:input_type -> health.ByIdRequest
	4,  // 32: health.WearableDataService.UpdateWearableData:input_type -> health.WearableData
	0,  // 33: health.WearableDataService.DeleteWearableData:input_type -> health.ByIdRequest
	12, // 34: health.WearableDataService.ListWearableData:input_type -> health.ListWearableDataRequest
	5,  // 35: health.HealthRecommendationService.CreateHealthRecommendation:input_type -> health.HealthRecommendation
	0,  // 36: health.HealthRecommendationService.GetHealthRecommendation:input_type -> health.ByIdRequest
	5,  // 37: health.HealthRecommendationService.UpdateHealthRecommendation:input_type -> health.HealthRecommendation
	0,  // 38: health.HealthRecommendationService.DeleteHealthRecommendation:input_type -> health.ByIdRequest
	13, // 39: health.HealthRecommendationService.ListHealthRecommendations:input_type -> health.ListHealthRecommendationsRequest
	21, // 40: health.HealthMonitoringService.GetDailySummary:output_type -> health.SummaryResponse
	21, // 41: health.HealthMonitoringService.GetWeeklySummary:output_type -> health.SummaryResponse
	8,  // 42: health.MedicalRecordService.CreateMedicalRecord:output_type -> health.Empty
	1,  // 43: health.MedicalRecordService.GetMedicalRecord:output_type -> health.MedicalRecord
	8,  // 44: health.MedicalRecordService.UpdateMedicalRecord:output_type -> health.Empty
	8,  // 45: health.MedicalRecordService.DeleteMedicalRecord:output_type -> health.Empty
	14, // 46: health.MedicalRecordService.ListMedicalRecords:output_type -> health.ListMedicalRecordsResponse
	8,  // 47: health.GeneticDataService.CreateGeneticData:output_type -> health.Empty
	2,  // 48: health.GeneticDataService.GetGeneticData:output_type -> health.GeneticData
	8,  // 49: health.GeneticDataService.UpdateGeneticData:output_type -> health.Empty
	8,  // 50: health.GeneticDataService.DeleteGeneticData:output_type -> health.Empty
	15, // 51: health.GeneticDataService.ListGeneticData:output_type -> health.ListGeneticDataResponse
	8,  // 52: health.LifestyleDataService.CreateLifestyleData:output_type -> health.Empty
	3,  // 53: health.LifestyleDataService.GetLifestyleData:output_type -> health.LifestyleData
	8,  // 54: health.LifestyleDataService.UpdateLifestyleData:output_type -> health.Empty
	8,  // 55: health.LifestyleDataService.DeleteLifestyleData:output_type -> health.Empty
	16, // 56: health.LifestyleDataService.ListLifestyleData:output_type -> health.ListLifestyleDataResponse
	8,  // 57: health.WearableDataService.CreateWearableData:output_type -> health.Empty
	4,  // 58: health.WearableDataService.GetWearableData:output_type -> health.WearableData
	8,  // 59: health.WearableDataService.UpdateWearableData:output_type -> health.Empty
	8,  // 60: health.WearableDataService.DeleteWearableData:output_type -> health.Empty
	17, // 61: health.WearableDataService.ListWearableData:output_type -> health.ListWearableDataResponse
	8,  // 62: health.HealthRecommendationService.CreateHealthRecommendation:output_type -> health.Empty
	5,  // 63: health.HealthRecommendationService.GetHealthRecommendation:output_type -> health.HealthRecommendation
	8,  // 64: health.HealthRecommendationService.UpdateHealthRecommendation:output_type -> health.Empty
	8,  // 65: health.HealthRecommendationService.DeleteHealthRecommendation:output_type -> health.Empty
	18, // 66: health.HealthRecommendationService.ListHealthRecommendations:output_type -> health.ListHealthRecommendationsResponse
	40, // [40:67] is the sub-list for method output_type
	13, // [13:40] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_protos_medical_proto_init() }
func file_protos_medical_proto_init() {
	if File_protos_medical_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_medical_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MedicalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GeneticData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LifestyleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WearableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HealthRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SleepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HeartRateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListMedicalRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListGeneticDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListLifestyleDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListWearableDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListHealthRecommendationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListMedicalRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListGeneticDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListLifestyleDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListWearableDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListHealthRecommendationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DailySummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*WeeklySummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_medical_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_medical_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_protos_medical_proto_goTypes,
		DependencyIndexes: file_protos_medical_proto_depIdxs,
		MessageInfos:      file_protos_medical_proto_msgTypes,
	}.Build()
	File_protos_medical_proto = out.File
	file_protos_medical_proto_rawDesc = nil
	file_protos_medical_proto_goTypes = nil
	file_protos_medical_proto_depIdxs = nil
}
