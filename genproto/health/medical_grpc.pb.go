// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: protos/medical.proto

package health

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthMonitoringService_GetDailySummary_FullMethodName  = "/health.HealthMonitoringService/GetDailySummary"
	HealthMonitoringService_GetWeeklySummary_FullMethodName = "/health.HealthMonitoringService/GetWeeklySummary"
)

// HealthMonitoringServiceClient is the client API for HealthMonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HealthMonitoringService
type HealthMonitoringServiceClient interface {
	GetDailySummary(ctx context.Context, in *DailySummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
	GetWeeklySummary(ctx context.Context, in *WeeklySummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
}

type healthMonitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthMonitoringServiceClient(cc grpc.ClientConnInterface) HealthMonitoringServiceClient {
	return &healthMonitoringServiceClient{cc}
}

func (c *healthMonitoringServiceClient) GetDailySummary(ctx context.Context, in *DailySummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, HealthMonitoringService_GetDailySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthMonitoringServiceClient) GetWeeklySummary(ctx context.Context, in *WeeklySummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, HealthMonitoringService_GetWeeklySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthMonitoringServiceServer is the server API for HealthMonitoringService service.
// All implementations must embed UnimplementedHealthMonitoringServiceServer
// for forward compatibility.
//
// HealthMonitoringService
type HealthMonitoringServiceServer interface {
	GetDailySummary(context.Context, *DailySummaryRequest) (*SummaryResponse, error)
	GetWeeklySummary(context.Context, *WeeklySummaryRequest) (*SummaryResponse, error)
	mustEmbedUnimplementedHealthMonitoringServiceServer()
}

// UnimplementedHealthMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthMonitoringServiceServer struct{}

func (UnimplementedHealthMonitoringServiceServer) GetDailySummary(context.Context, *DailySummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailySummary not implemented")
}
func (UnimplementedHealthMonitoringServiceServer) GetWeeklySummary(context.Context, *WeeklySummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklySummary not implemented")
}
func (UnimplementedHealthMonitoringServiceServer) mustEmbedUnimplementedHealthMonitoringServiceServer() {
}
func (UnimplementedHealthMonitoringServiceServer) testEmbeddedByValue() {}

// UnsafeHealthMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthMonitoringServiceServer will
// result in compilation errors.
type UnsafeHealthMonitoringServiceServer interface {
	mustEmbedUnimplementedHealthMonitoringServiceServer()
}

func RegisterHealthMonitoringServiceServer(s grpc.ServiceRegistrar, srv HealthMonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthMonitoringService_ServiceDesc, srv)
}

func _HealthMonitoringService_GetDailySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthMonitoringServiceServer).GetDailySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthMonitoringService_GetDailySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthMonitoringServiceServer).GetDailySummary(ctx, req.(*DailySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthMonitoringService_GetWeeklySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeeklySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthMonitoringServiceServer).GetWeeklySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthMonitoringService_GetWeeklySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthMonitoringServiceServer).GetWeeklySummary(ctx, req.(*WeeklySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthMonitoringService_ServiceDesc is the grpc.ServiceDesc for HealthMonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthMonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthMonitoringService",
	HandlerType: (*HealthMonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDailySummary",
			Handler:    _HealthMonitoringService_GetDailySummary_Handler,
		},
		{
			MethodName: "GetWeeklySummary",
			Handler:    _HealthMonitoringService_GetWeeklySummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical.proto",
}

const (
	MedicalRecordService_CreateMedicalRecord_FullMethodName = "/health.MedicalRecordService/CreateMedicalRecord"
	MedicalRecordService_GetMedicalRecord_FullMethodName    = "/health.MedicalRecordService/GetMedicalRecord"
	MedicalRecordService_UpdateMedicalRecord_FullMethodName = "/health.MedicalRecordService/UpdateMedicalRecord"
	MedicalRecordService_DeleteMedicalRecord_FullMethodName = "/health.MedicalRecordService/DeleteMedicalRecord"
	MedicalRecordService_ListMedicalRecords_FullMethodName  = "/health.MedicalRecordService/ListMedicalRecords"
)

// MedicalRecordServiceClient is the client API for MedicalRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Services
type MedicalRecordServiceClient interface {
	CreateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*Empty, error)
	GetMedicalRecord(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*MedicalRecord, error)
	UpdateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*Empty, error)
	DeleteMedicalRecord(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	ListMedicalRecords(ctx context.Context, in *ListMedicalRecordsRequest, opts ...grpc.CallOption) (*ListMedicalRecordsResponse, error)
}

type medicalRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalRecordServiceClient(cc grpc.ClientConnInterface) MedicalRecordServiceClient {
	return &medicalRecordServiceClient{cc}
}

func (c *medicalRecordServiceClient) CreateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_CreateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetMedicalRecord(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, MedicalRecordService_GetMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_UpdateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) DeleteMedicalRecord(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_DeleteMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ListMedicalRecords(ctx context.Context, in *ListMedicalRecordsRequest, opts ...grpc.CallOption) (*ListMedicalRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicalRecordsResponse)
	err := c.cc.Invoke(ctx, MedicalRecordService_ListMedicalRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalRecordServiceServer is the server API for MedicalRecordService service.
// All implementations must embed UnimplementedMedicalRecordServiceServer
// for forward compatibility.
//
// Services
type MedicalRecordServiceServer interface {
	CreateMedicalRecord(context.Context, *MedicalRecord) (*Empty, error)
	GetMedicalRecord(context.Context, *ByIdRequest) (*MedicalRecord, error)
	UpdateMedicalRecord(context.Context, *MedicalRecord) (*Empty, error)
	DeleteMedicalRecord(context.Context, *ByIdRequest) (*Empty, error)
	ListMedicalRecords(context.Context, *ListMedicalRecordsRequest) (*ListMedicalRecordsResponse, error)
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

// UnimplementedMedicalRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalRecordServiceServer struct{}

func (UnimplementedMedicalRecordServiceServer) CreateMedicalRecord(context.Context, *MedicalRecord) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetMedicalRecord(context.Context, *ByIdRequest) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateMedicalRecord(context.Context, *MedicalRecord) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordServiceServer) DeleteMedicalRecord(context.Context, *ByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ListMedicalRecords(context.Context, *ListMedicalRecordsRequest) (*ListMedicalRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalRecords not implemented")
}
func (UnimplementedMedicalRecordServiceServer) mustEmbedUnimplementedMedicalRecordServiceServer() {}
func (UnimplementedMedicalRecordServiceServer) testEmbeddedByValue()                              {}

// UnsafeMedicalRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalRecordServiceServer will
// result in compilation errors.
type UnsafeMedicalRecordServiceServer interface {
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

func RegisterMedicalRecordServiceServer(s grpc.ServiceRegistrar, srv MedicalRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalRecordService_ServiceDesc, srv)
}

func _MedicalRecordService_CreateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).CreateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_CreateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).CreateMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_GetMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetMedicalRecord(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_UpdateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_DeleteMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).DeleteMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_DeleteMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).DeleteMedicalRecord(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ListMedicalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicalRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ListMedicalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_ListMedicalRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ListMedicalRecords(ctx, req.(*ListMedicalRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalRecordService_ServiceDesc is the grpc.ServiceDesc for MedicalRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.MedicalRecordService",
	HandlerType: (*MedicalRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedicalRecord",
			Handler:    _MedicalRecordService_CreateMedicalRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecord",
			Handler:    _MedicalRecordService_GetMedicalRecord_Handler,
		},
		{
			MethodName: "UpdateMedicalRecord",
			Handler:    _MedicalRecordService_UpdateMedicalRecord_Handler,
		},
		{
			MethodName: "DeleteMedicalRecord",
			Handler:    _MedicalRecordService_DeleteMedicalRecord_Handler,
		},
		{
			MethodName: "ListMedicalRecords",
			Handler:    _MedicalRecordService_ListMedicalRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical.proto",
}

const (
	GeneticDataService_CreateGeneticData_FullMethodName = "/health.GeneticDataService/CreateGeneticData"
	GeneticDataService_GetGeneticData_FullMethodName    = "/health.GeneticDataService/GetGeneticData"
	GeneticDataService_UpdateGeneticData_FullMethodName = "/health.GeneticDataService/UpdateGeneticData"
	GeneticDataService_DeleteGeneticData_FullMethodName = "/health.GeneticDataService/DeleteGeneticData"
	GeneticDataService_ListGeneticData_FullMethodName   = "/health.GeneticDataService/ListGeneticData"
)

// GeneticDataServiceClient is the client API for GeneticDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneticDataServiceClient interface {
	CreateGeneticData(ctx context.Context, in *GeneticData, opts ...grpc.CallOption) (*Empty, error)
	GetGeneticData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*GeneticData, error)
	UpdateGeneticData(ctx context.Context, in *GeneticData, opts ...grpc.CallOption) (*Empty, error)
	DeleteGeneticData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	ListGeneticData(ctx context.Context, in *ListGeneticDataRequest, opts ...grpc.CallOption) (*ListGeneticDataResponse, error)
}

type geneticDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneticDataServiceClient(cc grpc.ClientConnInterface) GeneticDataServiceClient {
	return &geneticDataServiceClient{cc}
}

func (c *geneticDataServiceClient) CreateGeneticData(ctx context.Context, in *GeneticData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GeneticDataService_CreateGeneticData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticDataServiceClient) GetGeneticData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*GeneticData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneticData)
	err := c.cc.Invoke(ctx, GeneticDataService_GetGeneticData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticDataServiceClient) UpdateGeneticData(ctx context.Context, in *GeneticData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GeneticDataService_UpdateGeneticData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticDataServiceClient) DeleteGeneticData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GeneticDataService_DeleteGeneticData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneticDataServiceClient) ListGeneticData(ctx context.Context, in *ListGeneticDataRequest, opts ...grpc.CallOption) (*ListGeneticDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGeneticDataResponse)
	err := c.cc.Invoke(ctx, GeneticDataService_ListGeneticData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneticDataServiceServer is the server API for GeneticDataService service.
// All implementations must embed UnimplementedGeneticDataServiceServer
// for forward compatibility.
type GeneticDataServiceServer interface {
	CreateGeneticData(context.Context, *GeneticData) (*Empty, error)
	GetGeneticData(context.Context, *ByIdRequest) (*GeneticData, error)
	UpdateGeneticData(context.Context, *GeneticData) (*Empty, error)
	DeleteGeneticData(context.Context, *ByIdRequest) (*Empty, error)
	ListGeneticData(context.Context, *ListGeneticDataRequest) (*ListGeneticDataResponse, error)
	mustEmbedUnimplementedGeneticDataServiceServer()
}

// UnimplementedGeneticDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneticDataServiceServer struct{}

func (UnimplementedGeneticDataServiceServer) CreateGeneticData(context.Context, *GeneticData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeneticData not implemented")
}
func (UnimplementedGeneticDataServiceServer) GetGeneticData(context.Context, *ByIdRequest) (*GeneticData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneticData not implemented")
}
func (UnimplementedGeneticDataServiceServer) UpdateGeneticData(context.Context, *GeneticData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeneticData not implemented")
}
func (UnimplementedGeneticDataServiceServer) DeleteGeneticData(context.Context, *ByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeneticData not implemented")
}
func (UnimplementedGeneticDataServiceServer) ListGeneticData(context.Context, *ListGeneticDataRequest) (*ListGeneticDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGeneticData not implemented")
}
func (UnimplementedGeneticDataServiceServer) mustEmbedUnimplementedGeneticDataServiceServer() {}
func (UnimplementedGeneticDataServiceServer) testEmbeddedByValue()                            {}

// UnsafeGeneticDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneticDataServiceServer will
// result in compilation errors.
type UnsafeGeneticDataServiceServer interface {
	mustEmbedUnimplementedGeneticDataServiceServer()
}

func RegisterGeneticDataServiceServer(s grpc.ServiceRegistrar, srv GeneticDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeneticDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeneticDataService_ServiceDesc, srv)
}

func _GeneticDataService_CreateGeneticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneticData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticDataServiceServer).CreateGeneticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticDataService_CreateGeneticData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticDataServiceServer).CreateGeneticData(ctx, req.(*GeneticData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticDataService_GetGeneticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticDataServiceServer).GetGeneticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticDataService_GetGeneticData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticDataServiceServer).GetGeneticData(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticDataService_UpdateGeneticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneticData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticDataServiceServer).UpdateGeneticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticDataService_UpdateGeneticData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticDataServiceServer).UpdateGeneticData(ctx, req.(*GeneticData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticDataService_DeleteGeneticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticDataServiceServer).DeleteGeneticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticDataService_DeleteGeneticData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticDataServiceServer).DeleteGeneticData(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneticDataService_ListGeneticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGeneticDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneticDataServiceServer).ListGeneticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneticDataService_ListGeneticData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneticDataServiceServer).ListGeneticData(ctx, req.(*ListGeneticDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneticDataService_ServiceDesc is the grpc.ServiceDesc for GeneticDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneticDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.GeneticDataService",
	HandlerType: (*GeneticDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGeneticData",
			Handler:    _GeneticDataService_CreateGeneticData_Handler,
		},
		{
			MethodName: "GetGeneticData",
			Handler:    _GeneticDataService_GetGeneticData_Handler,
		},
		{
			MethodName: "UpdateGeneticData",
			Handler:    _GeneticDataService_UpdateGeneticData_Handler,
		},
		{
			MethodName: "DeleteGeneticData",
			Handler:    _GeneticDataService_DeleteGeneticData_Handler,
		},
		{
			MethodName: "ListGeneticData",
			Handler:    _GeneticDataService_ListGeneticData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical.proto",
}

const (
	LifestyleDataService_CreateLifestyleData_FullMethodName = "/health.LifestyleDataService/CreateLifestyleData"
	LifestyleDataService_GetLifestyleData_FullMethodName    = "/health.LifestyleDataService/GetLifestyleData"
	LifestyleDataService_UpdateLifestyleData_FullMethodName = "/health.LifestyleDataService/UpdateLifestyleData"
	LifestyleDataService_DeleteLifestyleData_FullMethodName = "/health.LifestyleDataService/DeleteLifestyleData"
	LifestyleDataService_ListLifestyleData_FullMethodName   = "/health.LifestyleDataService/ListLifestyleData"
)

// LifestyleDataServiceClient is the client API for LifestyleDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LifestyleDataServiceClient interface {
	CreateLifestyleData(ctx context.Context, in *LifestyleData, opts ...grpc.CallOption) (*Empty, error)
	GetLifestyleData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*LifestyleData, error)
	UpdateLifestyleData(ctx context.Context, in *LifestyleData, opts ...grpc.CallOption) (*Empty, error)
	DeleteLifestyleData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	ListLifestyleData(ctx context.Context, in *ListLifestyleDataRequest, opts ...grpc.CallOption) (*ListLifestyleDataResponse, error)
}

type lifestyleDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifestyleDataServiceClient(cc grpc.ClientConnInterface) LifestyleDataServiceClient {
	return &lifestyleDataServiceClient{cc}
}

func (c *lifestyleDataServiceClient) CreateLifestyleData(ctx context.Context, in *LifestyleData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LifestyleDataService_CreateLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleDataServiceClient) GetLifestyleData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*LifestyleData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LifestyleData)
	err := c.cc.Invoke(ctx, LifestyleDataService_GetLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleDataServiceClient) UpdateLifestyleData(ctx context.Context, in *LifestyleData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LifestyleDataService_UpdateLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleDataServiceClient) DeleteLifestyleData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LifestyleDataService_DeleteLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifestyleDataServiceClient) ListLifestyleData(ctx context.Context, in *ListLifestyleDataRequest, opts ...grpc.CallOption) (*ListLifestyleDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLifestyleDataResponse)
	err := c.cc.Invoke(ctx, LifestyleDataService_ListLifestyleData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifestyleDataServiceServer is the server API for LifestyleDataService service.
// All implementations must embed UnimplementedLifestyleDataServiceServer
// for forward compatibility.
type LifestyleDataServiceServer interface {
	CreateLifestyleData(context.Context, *LifestyleData) (*Empty, error)
	GetLifestyleData(context.Context, *ByIdRequest) (*LifestyleData, error)
	UpdateLifestyleData(context.Context, *LifestyleData) (*Empty, error)
	DeleteLifestyleData(context.Context, *ByIdRequest) (*Empty, error)
	ListLifestyleData(context.Context, *ListLifestyleDataRequest) (*ListLifestyleDataResponse, error)
	mustEmbedUnimplementedLifestyleDataServiceServer()
}

// UnimplementedLifestyleDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLifestyleDataServiceServer struct{}

func (UnimplementedLifestyleDataServiceServer) CreateLifestyleData(context.Context, *LifestyleData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLifestyleData not implemented")
}
func (UnimplementedLifestyleDataServiceServer) GetLifestyleData(context.Context, *ByIdRequest) (*LifestyleData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLifestyleData not implemented")
}
func (UnimplementedLifestyleDataServiceServer) UpdateLifestyleData(context.Context, *LifestyleData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLifestyleData not implemented")
}
func (UnimplementedLifestyleDataServiceServer) DeleteLifestyleData(context.Context, *ByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLifestyleData not implemented")
}
func (UnimplementedLifestyleDataServiceServer) ListLifestyleData(context.Context, *ListLifestyleDataRequest) (*ListLifestyleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLifestyleData not implemented")
}
func (UnimplementedLifestyleDataServiceServer) mustEmbedUnimplementedLifestyleDataServiceServer() {}
func (UnimplementedLifestyleDataServiceServer) testEmbeddedByValue()                              {}

// UnsafeLifestyleDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LifestyleDataServiceServer will
// result in compilation errors.
type UnsafeLifestyleDataServiceServer interface {
	mustEmbedUnimplementedLifestyleDataServiceServer()
}

func RegisterLifestyleDataServiceServer(s grpc.ServiceRegistrar, srv LifestyleDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedLifestyleDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LifestyleDataService_ServiceDesc, srv)
}

func _LifestyleDataService_CreateLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifestyleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleDataServiceServer).CreateLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleDataService_CreateLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleDataServiceServer).CreateLifestyleData(ctx, req.(*LifestyleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleDataService_GetLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleDataServiceServer).GetLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleDataService_GetLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleDataServiceServer).GetLifestyleData(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleDataService_UpdateLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifestyleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleDataServiceServer).UpdateLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleDataService_UpdateLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleDataServiceServer).UpdateLifestyleData(ctx, req.(*LifestyleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleDataService_DeleteLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleDataServiceServer).DeleteLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleDataService_DeleteLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleDataServiceServer).DeleteLifestyleData(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifestyleDataService_ListLifestyleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLifestyleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifestyleDataServiceServer).ListLifestyleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LifestyleDataService_ListLifestyleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifestyleDataServiceServer).ListLifestyleData(ctx, req.(*ListLifestyleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LifestyleDataService_ServiceDesc is the grpc.ServiceDesc for LifestyleDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LifestyleDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.LifestyleDataService",
	HandlerType: (*LifestyleDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLifestyleData",
			Handler:    _LifestyleDataService_CreateLifestyleData_Handler,
		},
		{
			MethodName: "GetLifestyleData",
			Handler:    _LifestyleDataService_GetLifestyleData_Handler,
		},
		{
			MethodName: "UpdateLifestyleData",
			Handler:    _LifestyleDataService_UpdateLifestyleData_Handler,
		},
		{
			MethodName: "DeleteLifestyleData",
			Handler:    _LifestyleDataService_DeleteLifestyleData_Handler,
		},
		{
			MethodName: "ListLifestyleData",
			Handler:    _LifestyleDataService_ListLifestyleData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical.proto",
}

const (
	WearableDataService_CreateWearableData_FullMethodName = "/health.WearableDataService/CreateWearableData"
	WearableDataService_GetWearableData_FullMethodName    = "/health.WearableDataService/GetWearableData"
	WearableDataService_UpdateWearableData_FullMethodName = "/health.WearableDataService/UpdateWearableData"
	WearableDataService_DeleteWearableData_FullMethodName = "/health.WearableDataService/DeleteWearableData"
	WearableDataService_ListWearableData_FullMethodName   = "/health.WearableDataService/ListWearableData"
)

// WearableDataServiceClient is the client API for WearableDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableDataServiceClient interface {
	CreateWearableData(ctx context.Context, in *WearableData, opts ...grpc.CallOption) (*Empty, error)
	GetWearableData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*WearableData, error)
	UpdateWearableData(ctx context.Context, in *WearableData, opts ...grpc.CallOption) (*Empty, error)
	DeleteWearableData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	ListWearableData(ctx context.Context, in *ListWearableDataRequest, opts ...grpc.CallOption) (*ListWearableDataResponse, error)
}

type wearableDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableDataServiceClient(cc grpc.ClientConnInterface) WearableDataServiceClient {
	return &wearableDataServiceClient{cc}
}

func (c *wearableDataServiceClient) CreateWearableData(ctx context.Context, in *WearableData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, WearableDataService_CreateWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) GetWearableData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*WearableData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WearableData)
	err := c.cc.Invoke(ctx, WearableDataService_GetWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) UpdateWearableData(ctx context.Context, in *WearableData, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, WearableDataService_UpdateWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) DeleteWearableData(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, WearableDataService_DeleteWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) ListWearableData(ctx context.Context, in *ListWearableDataRequest, opts ...grpc.CallOption) (*ListWearableDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWearableDataResponse)
	err := c.cc.Invoke(ctx, WearableDataService_ListWearableData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WearableDataServiceServer is the server API for WearableDataService service.
// All implementations must embed UnimplementedWearableDataServiceServer
// for forward compatibility.
type WearableDataServiceServer interface {
	CreateWearableData(context.Context, *WearableData) (*Empty, error)
	GetWearableData(context.Context, *ByIdRequest) (*WearableData, error)
	UpdateWearableData(context.Context, *WearableData) (*Empty, error)
	DeleteWearableData(context.Context, *ByIdRequest) (*Empty, error)
	ListWearableData(context.Context, *ListWearableDataRequest) (*ListWearableDataResponse, error)
	mustEmbedUnimplementedWearableDataServiceServer()
}

// UnimplementedWearableDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWearableDataServiceServer struct{}

func (UnimplementedWearableDataServiceServer) CreateWearableData(context.Context, *WearableData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWearableData not implemented")
}
func (UnimplementedWearableDataServiceServer) GetWearableData(context.Context, *ByIdRequest) (*WearableData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWearableData not implemented")
}
func (UnimplementedWearableDataServiceServer) UpdateWearableData(context.Context, *WearableData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWearableData not implemented")
}
func (UnimplementedWearableDataServiceServer) DeleteWearableData(context.Context, *ByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWearableData not implemented")
}
func (UnimplementedWearableDataServiceServer) ListWearableData(context.Context, *ListWearableDataRequest) (*ListWearableDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWearableData not implemented")
}
func (UnimplementedWearableDataServiceServer) mustEmbedUnimplementedWearableDataServiceServer() {}
func (UnimplementedWearableDataServiceServer) testEmbeddedByValue()                             {}

// UnsafeWearableDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableDataServiceServer will
// result in compilation errors.
type UnsafeWearableDataServiceServer interface {
	mustEmbedUnimplementedWearableDataServiceServer()
}

func RegisterWearableDataServiceServer(s grpc.ServiceRegistrar, srv WearableDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedWearableDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WearableDataService_ServiceDesc, srv)
}

func _WearableDataService_CreateWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).CreateWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_CreateWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).CreateWearableData(ctx, req.(*WearableData))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_GetWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).GetWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_GetWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).GetWearableData(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_UpdateWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).UpdateWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_UpdateWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).UpdateWearableData(ctx, req.(*WearableData))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_DeleteWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).DeleteWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_DeleteWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).DeleteWearableData(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_ListWearableData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWearableDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).ListWearableData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_ListWearableData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).ListWearableData(ctx, req.(*ListWearableDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WearableDataService_ServiceDesc is the grpc.ServiceDesc for WearableDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearableDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.WearableDataService",
	HandlerType: (*WearableDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWearableData",
			Handler:    _WearableDataService_CreateWearableData_Handler,
		},
		{
			MethodName: "GetWearableData",
			Handler:    _WearableDataService_GetWearableData_Handler,
		},
		{
			MethodName: "UpdateWearableData",
			Handler:    _WearableDataService_UpdateWearableData_Handler,
		},
		{
			MethodName: "DeleteWearableData",
			Handler:    _WearableDataService_DeleteWearableData_Handler,
		},
		{
			MethodName: "ListWearableData",
			Handler:    _WearableDataService_ListWearableData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical.proto",
}

const (
	HealthRecommendationService_CreateHealthRecommendation_FullMethodName = "/health.HealthRecommendationService/CreateHealthRecommendation"
	HealthRecommendationService_GetHealthRecommendation_FullMethodName    = "/health.HealthRecommendationService/GetHealthRecommendation"
	HealthRecommendationService_UpdateHealthRecommendation_FullMethodName = "/health.HealthRecommendationService/UpdateHealthRecommendation"
	HealthRecommendationService_DeleteHealthRecommendation_FullMethodName = "/health.HealthRecommendationService/DeleteHealthRecommendation"
	HealthRecommendationService_ListHealthRecommendations_FullMethodName  = "/health.HealthRecommendationService/ListHealthRecommendations"
)

// HealthRecommendationServiceClient is the client API for HealthRecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthRecommendationServiceClient interface {
	CreateHealthRecommendation(ctx context.Context, in *HealthRecommendation, opts ...grpc.CallOption) (*Empty, error)
	GetHealthRecommendation(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*HealthRecommendation, error)
	UpdateHealthRecommendation(ctx context.Context, in *HealthRecommendation, opts ...grpc.CallOption) (*Empty, error)
	DeleteHealthRecommendation(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	ListHealthRecommendations(ctx context.Context, in *ListHealthRecommendationsRequest, opts ...grpc.CallOption) (*ListHealthRecommendationsResponse, error)
}

type healthRecommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthRecommendationServiceClient(cc grpc.ClientConnInterface) HealthRecommendationServiceClient {
	return &healthRecommendationServiceClient{cc}
}

func (c *healthRecommendationServiceClient) CreateHealthRecommendation(ctx context.Context, in *HealthRecommendation, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HealthRecommendationService_CreateHealthRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) GetHealthRecommendation(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*HealthRecommendation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthRecommendation)
	err := c.cc.Invoke(ctx, HealthRecommendationService_GetHealthRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) UpdateHealthRecommendation(ctx context.Context, in *HealthRecommendation, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HealthRecommendationService_UpdateHealthRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) DeleteHealthRecommendation(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, HealthRecommendationService_DeleteHealthRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthRecommendationServiceClient) ListHealthRecommendations(ctx context.Context, in *ListHealthRecommendationsRequest, opts ...grpc.CallOption) (*ListHealthRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHealthRecommendationsResponse)
	err := c.cc.Invoke(ctx, HealthRecommendationService_ListHealthRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthRecommendationServiceServer is the server API for HealthRecommendationService service.
// All implementations must embed UnimplementedHealthRecommendationServiceServer
// for forward compatibility.
type HealthRecommendationServiceServer interface {
	CreateHealthRecommendation(context.Context, *HealthRecommendation) (*Empty, error)
	GetHealthRecommendation(context.Context, *ByIdRequest) (*HealthRecommendation, error)
	UpdateHealthRecommendation(context.Context, *HealthRecommendation) (*Empty, error)
	DeleteHealthRecommendation(context.Context, *ByIdRequest) (*Empty, error)
	ListHealthRecommendations(context.Context, *ListHealthRecommendationsRequest) (*ListHealthRecommendationsResponse, error)
	mustEmbedUnimplementedHealthRecommendationServiceServer()
}

// UnimplementedHealthRecommendationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthRecommendationServiceServer struct{}

func (UnimplementedHealthRecommendationServiceServer) CreateHealthRecommendation(context.Context, *HealthRecommendation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHealthRecommendation not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) GetHealthRecommendation(context.Context, *ByIdRequest) (*HealthRecommendation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthRecommendation not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) UpdateHealthRecommendation(context.Context, *HealthRecommendation) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHealthRecommendation not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) DeleteHealthRecommendation(context.Context, *ByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHealthRecommendation not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) ListHealthRecommendations(context.Context, *ListHealthRecommendationsRequest) (*ListHealthRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHealthRecommendations not implemented")
}
func (UnimplementedHealthRecommendationServiceServer) mustEmbedUnimplementedHealthRecommendationServiceServer() {
}
func (UnimplementedHealthRecommendationServiceServer) testEmbeddedByValue() {}

// UnsafeHealthRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthRecommendationServiceServer will
// result in compilation errors.
type UnsafeHealthRecommendationServiceServer interface {
	mustEmbedUnimplementedHealthRecommendationServiceServer()
}

func RegisterHealthRecommendationServiceServer(s grpc.ServiceRegistrar, srv HealthRecommendationServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthRecommendationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthRecommendationService_ServiceDesc, srv)
}

func _HealthRecommendationService_CreateHealthRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRecommendation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).CreateHealthRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_CreateHealthRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).CreateHealthRecommendation(ctx, req.(*HealthRecommendation))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_GetHealthRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).GetHealthRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_GetHealthRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).GetHealthRecommendation(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_UpdateHealthRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRecommendation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).UpdateHealthRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_UpdateHealthRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).UpdateHealthRecommendation(ctx, req.(*HealthRecommendation))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_DeleteHealthRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).DeleteHealthRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_DeleteHealthRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).DeleteHealthRecommendation(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthRecommendationService_ListHealthRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHealthRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthRecommendationServiceServer).ListHealthRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthRecommendationService_ListHealthRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthRecommendationServiceServer).ListHealthRecommendations(ctx, req.(*ListHealthRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthRecommendationService_ServiceDesc is the grpc.ServiceDesc for HealthRecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthRecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthRecommendationService",
	HandlerType: (*HealthRecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHealthRecommendation",
			Handler:    _HealthRecommendationService_CreateHealthRecommendation_Handler,
		},
		{
			MethodName: "GetHealthRecommendation",
			Handler:    _HealthRecommendationService_GetHealthRecommendation_Handler,
		},
		{
			MethodName: "UpdateHealthRecommendation",
			Handler:    _HealthRecommendationService_UpdateHealthRecommendation_Handler,
		},
		{
			MethodName: "DeleteHealthRecommendation",
			Handler:    _HealthRecommendationService_DeleteHealthRecommendation_Handler,
		},
		{
			MethodName: "ListHealthRecommendations",
			Handler:    _HealthRecommendationService_ListHealthRecommendations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/medical.proto",
}
